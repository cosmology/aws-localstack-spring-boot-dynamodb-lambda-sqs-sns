networks:
  ls_network:
    ipam:
      config:
        - subnet: 10.0.2.0/24

services:
  localstack:
    container_name: "${LOCALSTACK_DOCKER_NAME:-localstack-main}"
    image: localstack/localstack:latest
    ports:
      - "127.0.0.1:4510-4559:4510-4559"
      - "127.0.0.1:4566:4566"
    environment:
      - AWS_DEFAULT_REGION=${AWS_REGION:-us-west-1}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - SERVICES=${SERVICES}
      - DEBUG=${DEBUG:-0}
    volumes:
      - "$PWD/tmp/localstack:/var/lib/localstack"
      - "$PWD/dynamodb-lambda-function/shared:/shared"
      - "$PWD/dynamodb-lambda-function/src/test/resources/localstack/local-aws-infrastructure.sh:/etc/localstack/init/ready.d/init-aws.sh"
      - "/var/run/docker.sock:/var/run/docker.sock"
    networks:
      ls_network:
        ipv4_address: 10.0.2.20
  
  producer:
    platform: linux/amd64
    container_name: ticket-producer
    build:
      context: ./ticket-producer
      dockerfile: Dockerfile
    environment:
      - AWS_REGION=${AWS_REGION}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    depends_on:
      localstack:
        condition: service_healthy
    ports:
      - 9080:9080
    healthcheck:
        test: "curl --fail --silent localhost:9080/actuator/health | jq --exit-status -n 'inputs | if has(\"status\") then .status==\"UP\" else false end' > /dev/null || exit 1"
        interval: 5s
        timeout: 5s
        retries: 3
        start_period: 5s
    dns:
      - 10.0.2.20
    networks:
      - ls_network
  
  sport-consumer:
    platform: linux/amd64
    container_name: sport-consumer
    build:
      context: ./sport-ticket-consumer
      dockerfile: Dockerfile
    environment:
      - AWS_REGION=${AWS_REGION}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - TICKET_PRODUCER_URL=${TICKET_PRODUCER_URL}
    depends_on:
      producer:
        condition: service_healthy
    ports:
      - 9081:9081
    dns:
      - 10.0.2.20
    networks:
      - ls_network
  
  movie-consumer:
    platform: linux/amd64
    container_name: movie-consumer
    build:
      context: ./movie-ticket-consumer
      dockerfile: Dockerfile
    environment:
      - AWS_REGION=${AWS_REGION}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - TICKET_PRODUCER_URL=${TICKET_PRODUCER_URL}
    depends_on:
      producer:
        condition: service_healthy
    ports:
      - 9082:9082
    dns:
      - 10.0.2.20
    networks:
      - ls_network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.25
    container_name: elasticsearch
    restart: unless-stopped
    depends_on:
      producer:
        condition: service_healthy
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      discovery.type: single-node
      xpack.security.enabled: false
      ES_JAVA_OPTS: "-Xms512m -Xmx512m"
    healthcheck:
      test: "curl -f http://localhost:9200 || exit 1"

  logstash:
    image: docker.elastic.co/logstash/logstash:7.17.25
    container_name: logstash
    restart: unless-stopped
    ports:
      - "5044:5044"
    volumes:
      - ./logstash/pipeline:/usr/share/logstash/pipeline/
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: "curl -f http://localhost:9600 || exit 1"

  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.25
    container_name: kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: "curl -f http://localhost:5601 || exit 1"

  filebeat:
    build: filebeat
    container_name: filebeat
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/containers:/usr/share/dockerlogs/data:ro
    depends_on:
      elasticsearch:
        condition: service_healthy
      logstash:
        condition: service_healthy
  
  prometheus:
    image: prom/prometheus:v2.55.1
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    depends_on:
      producer:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "9090" ]


  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      prometheus:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "3000" ]


