
# https://github.com/open-telemetry/opentelemetry-collector/blob/main/extension/README.md
extensions:
  # responsible for responding to health check calls on behalf of the collector.
  health_check:
  # fetches the collectorâ€™s performance data
  pprof:
    endpoint: :1888
  # serves as an http endpoint that provides live debugging data about instrumented components.
  zpages:
    endpoint: :55679

receivers:
  otlp:
    protocols:
      grpc:
        endpoint: otel-collector:4317
      http:
        endpoint: otel-collector:4318

  # Host metrics
  hostmetrics:
    root_path: /hostfs
    scrapers:
      cpu:
        metrics:
          system.cpu.utilization:
            enabled: true
      disk:
      load:
      filesystem:
        exclude_mount_points:
          mount_points:
            - /dev/*
            - /proc/*
            - /sys/*
            - /run/k3s/containerd/*
            - /var/lib/docker/*
            - /var/lib/kubelet/*
            - /snap/*
          match_type: regexp
        exclude_fs_types:
          fs_types:
            - autofs
            - binfmt_misc
            - bpf
            - cgroup2
            - configfs
            - debugfs
            - devpts
            - devtmpfs
            - fusectl
            - hugetlbfs
            - iso9660
            - mqueue
            - nsfs
            - overlay
            - proc
            - procfs
            - pstore
            - rpc_pipefs
            - securityfs
            - selinuxfs
            - squashfs
            - sysfs
            - tracefs
          match_type: strict
      memory:
        metrics:
          system.memory.utilization:
            enabled: true
      network:
      paging:
      processes:
      process:
        mute_process_exe_error: true
        mute_process_io_error: true
        mute_process_user_error: true

  # Collect own metrics
  prometheus:
    config:
      scrape_configs:
        - job_name: 'otel-collector'
          scrape_interval: 10s
          static_configs:
            - targets: ['0.0.0.0:8888']

processors:
  # batch metrics before sending to reduce API usage
  batch:
    timeout: 1s
    send_batch_size: 1024
  memory_limiter:
    check_interval: 10s
    limit_mib: 4000
  transform:
    error_mode: ignore
    trace_statements:
      - context: span
        statements:
          - replace_pattern(name, "\\?.*", "")
          - replace_match(name, "GET /api/ticket/*", "GET /api/ticket/{id}")

connectors:
  spanmetrics:

exporters:
  debug:
    verbosity: detailed # Configures the new 'debug' exporter with default settings

  # loki:
  #   auth:
  #     authenticator: basicauth/loki
  #   endpoint: "http://host.docker.internal:3100/loki/api/v1/push"

  # tempo
  # otlp:
  #   endpoint: host.docker.internal:4317
  #   tls:
  #     insecure: true

  otlp:
    endpoint: "jaeger:4317"
    tls:
      insecure: true

  otlphttp/prometheus:
    endpoint: "http://prometheus:9090/api/v1/otlp"
    tls:
      insecure: true

service:
  extensions: [pprof, zpages, health_check]
  pipelines:
    traces:
      receivers: [otlp]
      processors: [transform, batch]
      exporters: [debug, spanmetrics, otlp]
    metrics:
      receivers: [otlp, prometheus, spanmetrics]
      processors: [batch]
      exporters: [debug, otlphttp/prometheus]
    logs:
      receivers: [otlp]
      exporters: [debug, otlp]
